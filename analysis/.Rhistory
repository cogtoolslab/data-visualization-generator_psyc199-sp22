count(!! rlang::sym(vars[1]), !! rlang::sym(vars[2]), .drop=FALSE) %>%
mutate(freq = (n / sum(n) *100)) %>%
ggplot() +
geom_bar(aes(x=get(vars[1]), y=freq, fill=get(vars[2])),
stat="identity", position="stack"
) +
labs(x=vars[1], y="Frequency (%)") +
scale_fill_discrete(name = vars[2]) +
theme_light(base_size = 14)
} else if (graph_type == "bar" & varstype == "C_N"){
plot <- ggplot(df) +
geom_bar(aes(x=get(vars[1]), y=get(vars[2])),
position = "dodge", stat = "summary", fun = "median") +
labs(x=vars[1], y=paste("median", vars[2])) +
theme_light(base_size = 14)
}
if( graph_type == "pie" ){
# Pie chart for categorical variables
# Create Data
data <- data.frame(prop.table(table(df[vars])))
names(data) <- c("group", "prop")
data$prop <- data$prop *100
# Compute the position of labels
data$ypos <- cumsum(data$prop)- 0.5* data$prop
# Basic piechart
plot <- ggplot(data, aes(x="", y=prop, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
geom_text(aes(y = ypos, label = group), color = "white", size=6) +
scale_fill_brewer(palette="Set1") +
ggtitle(vars)+
theme(plot.title = element_text(hjust = 0.5),
legend.position="none")
}
if( graph_type == "scatter" ){
# scatter plot for combinations of numerical variables
plot <- ggplot(df) +
geom_point(aes(x = get(vars[1]), y = get(vars[2]))) +
labs(x=vars[1], y=vars[2]) +
theme_light(base_size = 14)
}
if( graph_type == "heatmap" ){
# heatmap for combinations of categorical variables
# Heatmap
plot <- df %>%
count(!! rlang::sym(vars[1]), !! rlang::sym(vars[2]), .drop=FALSE) %>%
mutate(freq = (n / sum(n) *100)) %>%
ggplot() +
geom_tile(aes(x=get(vars[1]), y=get(vars[2]), fill=freq)) +
labs(x=vars[1], y=vars[2]) +
scale_fill_binned(name = "Frequency (%)",
low = "#79B3FF",
high = "#002C65") +
theme_light(base_size = 14)
}
if( graph_type == "boxplot" & length(vars) == 2){
# box plot for categorical variables vs. numerical variables
plot <- ggplot(df) +
geom_boxplot(aes(x = get(vars[1]), y = get(vars[2]))) +
labs(x=vars[1], y=vars[2]) +
theme_light(base_size = 14)
} else if (graph_type == "boxplot"){
# box plot for numerical variables
plot <- ggplot(df) +
geom_boxplot(aes(x=get(vars), y="")) +
labs(x=vars, y="") +
theme_light(base_size = 14)
}
if( graph_type == "violin" & length(vars) == 2){
# Violin plot: alternative of box plot
plot <- ggplot(df, aes(x = get(vars[1]), y = get(vars[2]))) +
geom_violin(trim = TRUE) +
geom_boxplot(width=0.1)+
labs(x=vars[1], y=vars[2]) +
theme_light(base_size = 14)
} else if (graph_type == "violin"){
# Violin plot for numerical variables
plot <- ggplot(df, aes(x=get(vars), y="")) +
geom_violin(trim = TRUE) +
geom_boxplot(width=0.1) +
labs(x=vars, y="Frequency") +
theme_light(base_size = 14)
}
if (graph_type == "line" & varstype == "C_N"){
plot <- ggplot(df, aes(get(vars[1]), get(vars[2]), group=1)) +
stat_summary(fun.y = median,
# fun.ymin = function(x) median(x) - sd(x),
# fun.ymax = function(x) median(x) + sd(x),
geom = "pointrange") +
stat_summary(geom = "line",  fun = median, size=2) +
labs(x=vars[1], y=paste("median", vars[2])) +
theme_light(base_size = 14)
}
ggsave(filename=paste0(dfname, "-", graph_type, "-", paste(vars, collapse="__"), ".png"),
plot=plot,
path=savepath,
units = "cm",
width = 12,
height = 10,
dpi = 150,
type = "cairo" # anti-alaising
)
# return(plot)
}
comb_variables <- function(df, varstype){
# determine variable types ---------------------------
vartype <- sapply(df, class)
varnames_N <- names(vartype[ (vartype == "numeric") | (vartype == "integer")])
varnames_C <- names(vartype[ (vartype == "character") | (vartype == "factor") | (vartype == "logical")])
# combinations of variables as input of graph_generator function ----------
if (varstype == "N"){
return(varnames_N)
} else if (varstype == "C"){
return(varnames_C)
} else if (varstype == "N_N"){
comb_N_N <- expand.grid(varnames_N, varnames_N)
comb_N_N <- as.matrix( comb_N_N[comb_N_N$Var1 != comb_N_N$Var2, ] )
colnames(comb_N_N) <- c("X1", "X2")
return(comb_N_N)
} else if (varstype == "C_C"){
comb_C_C <- expand.grid(varnames_C, varnames_C)
comb_C_C <- as.matrix( comb_C_C[comb_C_C$Var1 != comb_C_C$Var2, ] )
colnames(comb_C_C) <- c("X1", "X2")
return(comb_C_C)
} else if (varstype == "C_N"){
comb_C_N <- as.matrix( expand.grid(varnames_C, varnames_N) )
colnames(comb_C_N) <- c("X1", "X2")
return(comb_C_N)
}
}
graph_types <- function(varstype){
if(varstype == "N") {
g <- c( "histogram", "density", "freqpoly", "boxplot", "violin" )
} else if (varstype == "C") {
g <- c( "bar", "pie" )
} else if (varstype == "N_N") {
g <- c( "scatter" )
} else if (varstype == "C_C") {
g <- c( "heatmap", "bar" )
} else if (varstype == "C_N") {
g <- c( "boxplot", "violin", "histogram", "density", "freqpoly", "bar", "line" )
}
return(g)
}
auto_graphs_generator <- function(fp){
# create folders ---------------------------
filename <- gsub("\\..*", "", basename(fp))
dir0 <- paste0("Graphs-", filename)
dir.create(file.path(dir0))
dir.create(file.path(dir0, "histogram"))
dir.create(file.path(dir0, "density"))
dir.create(file.path(dir0, "freqpoly"))
dir.create(file.path(dir0, "bar"))
dir.create(file.path(dir0, "pie"))
dir.create(file.path(dir0, "scatter"))
dir.create(file.path(dir0, "heatmap"))
dir.create(file.path(dir0, "boxplot"))
dir.create(file.path(dir0, "violin"))
dir.create(file.path(dir0, "line"))
df_input <- read_csvy(fp, stringsAsFactors = T)
# determine variable types ---------------------------
varnames_N <- comb_variables(df_input, "N")
varnames_C <- comb_variables(df_input, "C")
comb_N_N <- comb_variables(df_input, "N_N")
comb_C_C <- comb_variables(df_input, "C_C")
comb_C_N <- comb_variables(df_input, "C_N")
# Generate and save graphs ---------------------------
# prefix: sprintf("%02d", 1:length(varnames_N))
# N_NA ------
for( g in graph_types("N")){
mapply(graph_saver, list(df_input), varnames_N, list("N"), list(g), list(filename), list(file.path(dir0, g)))
}
# C_NA ------
for( g in graph_types("C")){
mapply(graph_saver, list(df_input), varnames_C, list("C"), list(g), list(filename), list(file.path(dir0, g)))
}
# N_N ------
for( g in graph_types("N_N")){
mapply(graph_saver, list(df_input), split(comb_N_N, row(comb_N_N)), list("N_N"), list(g), list(filename), list(file.path(dir0, g)))
}
# C_C ------
for( g in graph_types("C_C")){
mapply(graph_saver, list(df_input), split(comb_C_C, row(comb_C_C)), list("C_C"), list(g), list(filename), list(file.path(dir0, g)))
}
# C_N ------
# mapply(graph_saver, list(df_input), split(comb_C_N, row(comb_C_N)), list("scatter"), list(filename), list(file.path(dir0, "scatter")))
for( g in graph_types("C_N")){
mapply(graph_saver, list(df_input), split(comb_C_N, row(comb_C_N)), list("C_N"), list(g), list(filename), list(file.path(dir0, g)))
}
}
path <- file.path(getwd(), "synthetic_df.csv")
auto_graphs_generator(path)
library(dplyr)
Questions_generator <- function(fp) {
# read graph files -----------------------------------
filename <- gsub("\\..*", "", basename(fp))
dir0 <- paste0("Graphs-", filename)
# if the directory of graphs doesn't exist, create it
if(!dir.exists(file.path(dir0))){
auto_graphs_generator(path)
}
paths <- list.files(path = file.path(dir0), all.files = T, full.names = T, recursive = T)
# read variables from the graph files ---------------------------
list_graph_V1_V2 <- lapply( strsplit(paths, c("-|\\__|\\.")), function(x) x[ 3 : (length(x)-1)])
ml <- max(lengths(list_graph_V1_V2))
df_graph_X1_X2 <- data.frame( do.call(rbind, lapply(list_graph_V1_V2, function(x) `length<-`(unlist(x), ml))))
df_graph_X1_X2$path <- paths
names(df_graph_X1_X2) <- c("graph_type", "X1", "X2", "path")
df_graph_X1_X2 <- df_graph_X1_X2[, c("path", "graph_type", "X1", "X2")]
# combinations of different variable types ----------------------
df_input <- read_csvy(fp, stringsAsFactors = T)
varnames_N <- comb_variables(df_input, "N")
comb_N_NA <- data.frame(X1=varnames_N, X2=rep(NA, length(varnames_N)))
varnames_C <- comb_variables(df_input, "C")
comb_C_NA <- data.frame(X1=varnames_C, X2=rep(NA, length(varnames_C)))
comb_N_N <- comb_variables(df_input, "N_N")
comb_C_C <- comb_variables(df_input, "C_C")
comb_C_N <- comb_variables(df_input, "C_N")
# varnames_N -------------------------------------------------
# NA ---------------------------------------------------------
# c( "histogram", "density", "freqpoly", "boxplot", "violin" )
values_df <- data.frame(
v1=round(apply(df_input[,varnames_N], 2, median), 1),
v2=round(apply(df_input[,varnames_N], 2, median), 1) + round( apply(df_input[,varnames_N], 2, function(x) diff(range(x))) * 0.1, 1),
v3=round(apply(df_input[,varnames_N], 2, min), 1) + round(apply(df_input[,varnames_N], 2, function(x) diff(range(x))) * 0.1, 1),
v4=round(apply(df_input[,varnames_N], 2, min), 1) + round(apply(df_input[,varnames_N], 2, function(x) diff(range(x))) * 0.1, 1) * 2
)
values_df <- cbind(rownames(values_df), values_df)
rownames(values_df) <- NULL
names(values_df)[1] <- "X1"
df_sub <- merge(comb_N_NA, graph_types("N"), all=T)
names(df_sub)[3] <- "graph_type"
df_sub <- merge(df_sub, values_df, by=("X1"), all.x=T)
Q_N_NA <- c(
'sprintf("What is the range of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the standard deviation of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the mean of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the median of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the maximum of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the minimum of <strong>%s</strong>?", df_sub_Q$X1)',
# VLAT: Find Extremum (e.g. What is the rating that the people have rated the taxi the most?) -----
'sprintf("Which interval has the highest frequency in <strong>%s</strong>?", df_sub_Q$X1)',
# # Add VLAT ----------------------------------------------------
# VLAT: Retrieve value (e.g. How many people have rated the taxi between 4.0 and 4.2?) -----
'sprintf("What is the proportion of <strong>%s</strong> between %.4g and %.4g?", df_sub_Q$X1, df_sub_Q$v1, df_sub_Q$v2)',
# VLAT: Make Comparisons (e.g. More people have rated the taxi between 4.6 and 4.8 than between 4.2 and 4.4)
'sprintf("The proportion in <strong>%s</strong> between %.4g and %.4g is larger than between %.4g and %.4g.", df_sub_Q$X1, df_sub_Q$v1, df_sub_Q$v2, df_sub_Q$v3, df_sub_Q$v4)'
)
df_Q_N_NA <- data.frame()
for(q in Q_N_NA){
df_sub_Q <- df_sub
df_sub_Q$Questions <- eval(parse(text=q))
df_Q_N_NA <- rbind(df_Q_N_NA, df_sub_Q)
}
df_Q_N_NA <- df_Q_N_NA[, c("graph_type", "X1", "X2", "Questions")]
df_Q_N_NA <- df_Q_N_NA[!duplicated(df_Q_N_NA), ]
# varnames_C -------------------------------------------------
# NA ---------------------------------------------------------
# "bar"
# "pie"
####
list_levels <- sapply(df_input[, varnames_C], levels)
df_level <- data.frame(unlist(list_levels, use.names=F))
df_level$X1 <- rep(names(list_levels), lengths(list_levels))
names(df_level)[1] <- "level"
####
df_sub <- merge(comb_C_NA, graph_types("C"), all=T)
names(df_sub)[3] <- "graph_type"
df_sub <- merge(df_sub, df_level, by=c("X1"), all=T)
df_sub <- merge(df_sub, df_level, by=c("X1"), all=T)
names(df_sub)[c(4, 5)] <- c("l1", "l2")
df_sub <- df_sub[df_sub$l1 != df_sub$l2,]
Q_C_NA <- c(
# VLAT: Retrieve value (e.g. What is the average internet speed in Japan?) ------
# Y (Percentage) of 1 level
'sprintf("What is the percentage of %s in <strong>%s</strong>?", df_sub_Q$l1, df_sub_Q$X1)',
# Y (Percentage): Diff of 2 levels
'sprintf("What is the difference between the percentage of %s and the percentage of %s in <strong>%s</strong>?", df_sub_Q$l1, df_sub_Q$l2, df_sub_Q$X1)',
# Y (Percentage): Sum of 2 levels
'sprintf("What percentage is %s and %s in <strong>%s</strong> taken together?", df_sub_Q$l1, df_sub_Q$l2, df_sub_Q$X1)',
# VLAT: Find Extremum (e.g. In which country is the average internet speed the fastest in Asia?) ------
# X (Level): max
'sprintf("Which group has the largest proportion in <strong>%s</strong>?", df_sub_Q$X1)',
# X (Level): min
'sprintf("Which group has the smallest proportion in <strong>%s</strong>?", df_sub_Q$X1)',
# VLAT: Make Comparisons (e.g. The global smartphone market share of Apple is larger than that of Huawei.) -----
# X (Level): Compare larger
'sprintf("Which one has a larger proportion in <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$l1, df_sub_Q$l2)',
# X (Level): Compare smaller
'sprintf("Which one has a smaller proportion in <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$l1, df_sub_Q$l2)',
# VLAT: Make Comparisons (e.g. How many countries in Asia is the average internet speed slower than Thailand?) -----
# X (Count): Compare larger
'sprintf("How many groups in <strong>%s</strong> has a larger proportion than %s?", df_sub_Q$X1, df_sub_Q$l1)',
# X (Count): Compare smaller
'sprintf("How many groups in <strong>%s</strong> has a smaller proportion than %s?", df_sub_Q$X1, df_sub_Q$l1)',
# VLAT: Make Comparisons (e.g. The global smartphone market share of Apple is larger than that of Huawei.) -----
# (Bool): Compare higher
'sprintf("The percentage of %s is higher than that of %s in <strong>%s</strong>.", df_sub_Q$l1, df_sub_Q$l1, df_sub_Q$X1)',
# (Bool): Compare lower
'sprintf("The percentage of %s is lower than that of %s in <strong>%s</strong>.", df_sub_Q$l1, df_sub_Q$l2, df_sub_Q$X1)',
# Add VLAT ----------------------------------------------------------
# VLAT: Determine range (e.g. What is the range of the average internet speed in Asia?)
'sprintf("What is the range of the proportion of each group in <strong>%s</strong>.", df_sub_Q$X1)'
)
df_Q_C_NA <- data.frame()
for(q in Q_C_NA){
df_sub_Q <- df_sub
df_sub_Q$Questions <- eval(parse(text=q))
df_Q_C_NA <- rbind(df_Q_C_NA, df_sub_Q)
}
df_Q_C_NA <- df_Q_C_NA[, c("graph_type", "X1", "X2", "Questions")]
df_Q_C_NA <- df_Q_C_NA[!duplicated(df_Q_C_NA), ]
# varnames_N -------------------------------------------------
# varnames_N -------------------------------------------------
# c( "scatter" )
values_df <- data.frame(
v0=round(apply(df_input[,varnames_N], 2, median) + apply(df_input[,varnames_N], 2, sd)),
v1=round(apply(df_input[,varnames_N], 2, median), 1) + round(apply(df_input[,varnames_N], 2, sd) * 1.5, 1),
v2=round(apply(df_input[,varnames_N], 2, median), 1) - round(apply(df_input[,varnames_N], 2, sd) * 1.5, 1)
)
values_df <- cbind(rownames(values_df), values_df)
rownames(values_df) <- NULL
names(values_df)[1] <- "X1"
df_sub <- merge(comb_N_N, graph_types("N_N"), all=T)
names(df_sub)[3] <- "graph_type"
df_sub <- merge(df_sub, values_df, by=("X1"), all.x=T)
Q_N_N <- c(
# VLAT: Retrieve value (e.g. What is the weight for the person who is 165.1cm tall?) -----
'sprintf("What is the best prediction of <strong>%s</strong> if <strong>%s</strong> is %.4g?", df_sub_Q$X2, df_sub_Q$X1, df_sub_Q$v0)',
# VLAT: Find correlations/trends (e.g. There is a negative linear relationship between the height and the weight of the 85 males.) -----
'sprintf("What is the correlation between <strong>%s</strong> and <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("There is no linear correlation between <strong>%s</strong> and <strong>%s</strong>.", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("What is the approximate correlation coefficient between <strong>%s</strong> and <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Does <strong>%s</strong> increase while <strong>%s</strong> increases?", df_sub_Q$X2, df_sub_Q$X1)',
'sprintf("Does <strong>%s</strong> decrease while <strong>%s</strong> decreases?", df_sub_Q$X2, df_sub_Q$X1)',
# VLAT: Determine range (e.g. What is the range in weight for the 85 males?) -----
'sprintf("What is the range of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the standard deviation of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the mean of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the median of <strong>%s</strong>?", df_sub_Q$X1)',
# VLAT: Find Extremum (e.g. What is the height for the tallest person among the 85 males?) -----
'sprintf("What is the maximum of <strong>%s</strong>?", df_sub_Q$X1)',
'sprintf("What is the minimum of <strong>%s</strong>?", df_sub_Q$X1)',
# VLAT: Determine range (e.g. What is the range in weight for the 85 males?) -----
'sprintf("What is the range of <strong>%s</strong>?", df_sub_Q$X2)',
'sprintf("What is the standard deviation of <strong>%s</strong>?", df_sub_Q$X2)',
'sprintf("What is the mean of <strong>%s</strong>?", df_sub_Q$X2)',
'sprintf("What is the median of <strong>%s</strong>?", df_sub_Q$X2)',
# VLAT: Find Extremum (e.g. What is the height for the tallest person among the 85 males?) -----
'sprintf("What is the maximum of <strong>%s</strong>?", df_sub_Q$X2)',
'sprintf("What is the minimum of <strong>%s</strong>?", df_sub_Q$X2)',
# Add VLAT -----------------------------------------------------------
# VLAT: Find anomalies (e.g. What is the height for a person who lies outside the others the most?
'sprintf("What is the <strong>%s</strong> for a point which lies outside the others the most?", df_sub_Q$X2)',
# VLAT: Find clusters (e.g. A group of males are gathered around the height of 176 cm and the weight of 70 kg.)
'sprintf("A group of points are gathered around the <strong>%s</strong> of %.4g and the <strong>%s</strong> of %.4g.", df_sub_Q$X1, df_sub_Q$v1, df_sub_Q$X2, df_sub_Q$v2)',
# VLAT: Make comparisons (e.g. The weights for males with the height of 188 cm are al the same.)
'sprintf("The <strong>%s</strong> with the <strong>%s</strong> of %.4g are all the same.", df_sub_Q$X2, df_sub_Q$X1, df_sub_Q$v0)'
)
df_Q_N_N <- data.frame()
for(q in Q_N_N){
df_sub_Q <- df_sub
df_sub_Q$Questions <- eval(parse(text=q))
df_Q_N_N <- rbind(df_Q_N_N, df_sub_Q)
}
df_Q_N_N <- df_Q_N_N[, c("graph_type", "X1", "X2", "Questions")]
df_Q_N_N <- df_Q_N_N[!duplicated(df_Q_N_N),]
# varnames_C -------------------------------------------------
# varnames_C -------------------------------------------------
# c( "heatmap", "bar" )
# bar is stacked bar chart
df_sub <- merge(comb_C_C, graph_types("C_C"), all=T)
names(df_sub)[3] <- "graph_type"
df_sub <- merge(df_sub, df_level, by.x=c("X1"), by.y=c("X1"), all=T)
df_sub <- merge(df_sub, df_level, by.x=c("X2"), by.y=c("X1"), all=T)
df_sub <- merge(df_sub, df_level, by.x=c("X1"), by.y=c("X1"), all=T)
df_sub <- merge(df_sub, df_level, by.x=c("X2"), by.y=c("X1"), all=T)
names(df_sub)[4:7] <- c("l1_1", "l2_1", "l1_2", "l2_2")
df_sub <- df_sub[(df_sub$l1_1 != df_sub$l1_2) | (df_sub$l2_1 != df_sub$l2_2),]
Q_C_C <- c(
# VLAT: Retrieve value -----
'sprintf("What is the percentage of the combination of <strong>%s</strong> and <strong>%s</strong> whose proportion is the highest?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("What is the percentage of the combination of <strong>%s</strong> and <strong>%s</strong> whose proportion is the lowest?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("How many combinations\' percentage proportion are between %d and %d?", 10, 20)',
'sprintf("How many combinations\' percentage proportion are under %d?", 10)',
'sprintf("How many combinations\' percentage proportion are greater than %d?", 20)',
# VLAT: Find Extremum -----
'sprintf("In the %s <strong>%s</strong> group, which group in <strong>%s</strong> has the highest proportion?", df_sub_Q$l1_1, df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("In the %s <strong>%s</strong> group, which group in <strong>%s</strong> has the lowest proportion?", df_sub_Q$l1_1, df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("In the %s <strong>%s</strong> group, which group in <strong>%s</strong> has the highest proportion?", df_sub_Q$l2_1, df_sub_Q$X2, df_sub_Q$X1)',
'sprintf("In the %s <strong>%s</strong> group, which group in <strong>%s</strong> has the lowest proportion?", df_sub_Q$l2_1, df_sub_Q$X2, df_sub_Q$X1)',
'sprintf("Which combination of <strong>%s</strong> and <strong>%s</strong> has the highest proportion?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which combination of <strong>%s</strong> and <strong>%s</strong> has the lowest proportion?", df_sub_Q$X1, df_sub_Q$X2)',
# VLAT: Make comparisons -----
'sprintf("In the %s <strong>%s</strong> group, the %s <strong>%s</strong> group has a larger proportion than %s.", df_sub_Q$l1_1, df_sub_Q$X1, df_sub_Q$l2_1, df_sub_Q$X2, df_sub_Q$l2_2)',
'sprintf("In the %s <strong>%s</strong> group, the %s <strong>%s</strong> group has a smaller proportion than %s.", df_sub_Q$l1_1, df_sub_Q$X1, df_sub_Q$l2_1, df_sub_Q$X2, df_sub_Q$l2_2)',
# Add VLAT -------------------------------------------------------------
# VLAT: Retrieve value (relative value)
'sprintf("What is the proportion of %s <strong>%s</strong> in %s <strong>%s</strong>?", df_sub_Q$l2_1, df_sub_Q$X2, df_sub_Q$l1_1, df_sub_Q$X1)',
# VLAT: Make comparisons (relative value)
'sprintf("The ratio of the proportion of %s to %s in %s <strong>%s</strong> is higher than of %s <strong>%s</strong>.", df_sub_Q$l2_1, df_sub_Q$l2_2, df_sub_Q$l1_1, df_sub_Q$X1, df_sub_Q$l1_2, df_sub_Q$X1)'
)
df_Q_C_C <- data.frame()
for(q in Q_C_C){
df_sub_Q <- df_sub
df_sub_Q$Questions <- eval(parse(text=q))
df_Q_C_C <- rbind(df_Q_C_C, df_sub_Q)
}
df_Q_C_C <- df_Q_C_C[, c("graph_type", "X1", "X2", "Questions")]
df_Q_C_C <- df_Q_C_C[!duplicated(df_Q_C_C),]
# varnames_C -------------------------------------------------
# varnames_N -------------------------------------------------
# c( "boxplot", "violin", "histogram", "density", "freqpoly", "bar", "line" )
# Q_C_N_1
# x: N, group: C
# "histogram" (stacked)
# "density"
# "freqpoly"
# x: C, y: N
# "boxplot"
# "violin"
# Q_C_N_2
# x: C, y: mean of N
# "bar"
# "line"
df_sub <- merge(comb_C_N, graph_types("C_N"), all=T)
names(df_sub)[3] <- "graph_type"
df_sub <- merge(df_sub, df_level, by.x=c("X1"), by.y=c("X1"), all=T)
df_sub <- merge(df_sub, df_level, by.x=c("X1"), by.y=c("X1"), all=T)
names(df_sub)[4:5] <- c("l1", "l2")
df_sub <- df_sub[(df_sub$l1 != df_sub$l2), ]
Q_C_N_1 <- c(
'sprintf("What is the range of <strong>%s</strong> in %s <strong>%s</strong>?", df_sub_Q$X2, df_sub_Q$l1,  df_sub_Q$X1)',
'sprintf("What is the standard deviation of <strong>%s</strong> in %s <strong>%s</strong>?", df_sub_Q$X2, df_sub_Q$l1,  df_sub_Q$X1)',
'sprintf("What is the mean of <strong>%s</strong> in %s <strong>%s</strong>?", df_sub_Q$X2, df_sub_Q$l1,  df_sub_Q$X1)',
'sprintf("What is the median of <strong>%s</strong> in %s <strong>%s</strong>?", df_sub_Q$X2, df_sub_Q$l1,  df_sub_Q$X1)',
'sprintf("What is the maximum of <strong>%s</strong> in %s <strong>%s</strong>?", df_sub_Q$X2, df_sub_Q$l1,  df_sub_Q$X1)',
'sprintf("What is the minimum of <strong>%s</strong> in %s <strong>%s</strong>?", df_sub_Q$X2, df_sub_Q$l1,  df_sub_Q$X1)',
'sprintf("Which group in <strong>%s</strong> has the largest range of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the largest standard deviation of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the largest mean of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the largest median of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the largest maximum of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the largest minimum of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the smallest range of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the smallest standard deviation of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the smallest mean of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the smallest median of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the smallest maximum of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("Which group in <strong>%s</strong> has the smallest minimum of <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("How many groups in <strong>%s</strong> is the median of <strong>%s</strong> larger than %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1)',
'sprintf("How many groups in <strong>%s</strong> is the median of <strong>%s</strong> smaller than %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1)',
'sprintf("Which group in <strong>%s</strong> has a larger range of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a larger standard deviation of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a larger mean of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a larger median of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a larger maximum of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a larger minimum of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a smaller range of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a smaller standard deviation of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a smaller mean of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a smaller median of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a smaller maximum of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)',
'sprintf("Which group in <strong>%s</strong> has a smaller minimum of <strong>%s</strong>, %s or %s?", df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$l2)'
)
Q_C_N_2 <- c(
# VLAT: Retrieve Value
'sprintf("What is the median of <strong>%s</strong> in the %s <strong>%s</strong>?", df_sub_Q$X2, df_sub_Q$l1, df_sub_Q$X1)',
# VLAT: Find Extremum
'sprintf("In which group of <strong>%s</strong> has the highest median <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
'sprintf("In which group of <strong>%s</strong> has the lowest median <strong>%s</strong>?", df_sub_Q$X1, df_sub_Q$X2)',
# VLAT: Make Comparisons
'sprintf("In the group of %s <strong>%s</strong>, the median of <strong>%s</strong> is higher than of %s <strong>%s</strong>.", df_sub_Q$l1, df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l2, df_sub_Q$X1)',
'sprintf("In the group of %s <strong>%s</strong>, the median of <strong>%s</strong> is lower than of %s <strong>%s</strong>.", df_sub_Q$l1, df_sub_Q$X1, df_sub_Q$X2, df_sub_Q$l2, df_sub_Q$X1)',
# Add VLAT -----------------------------------------------------------------
# VLAT: Determine Range
'sprintf("What is the range of median of <strong>%s</strong> among each group in <strong>%s</strong>", df_sub_Q$X2, df_sub_Q$X1)'
)
df_Q_C_N <- data.frame()
df_sub_1 <- df_sub[
df_sub$graph_type == "histogram" |
df_sub$graph_type == "density" |
df_sub$graph_type == "freqpoly", ]
df_sub_2 <- df_sub[df_sub$graph_type == "bar" |
df_sub$graph_type == "line" |
df_sub$graph_type == "boxplot" |
df_sub$graph_type == "violin" , ]
for(q in Q_C_N_1){
df_sub_Q <- df_sub_1
df_sub_Q$Questions <- eval(parse(text=q))
df_Q_C_N <- rbind(df_Q_C_N, df_sub_Q)
}
for(q in Q_C_N_2){
df_sub_Q <- df_sub_2
df_sub_Q$Questions <- eval(parse(text=q))
df_Q_C_N <- rbind(df_Q_C_N, df_sub_Q)
}
df_Q_C_N <- df_Q_C_N[, c("graph_type", "X1", "X2", "Questions")]
df_Q_C_N <- df_Q_C_N[!duplicated(df_Q_C_N),]
# merge all types of variables combinations
questions_df <- rbind(
merge(df_graph_X1_X2, df_Q_N_NA, by=c("graph_type", "X1", "X2"), all.y = T),
merge(df_graph_X1_X2, df_Q_C_NA, by=c("graph_type", "X1", "X2"), all.y = T),
merge(df_graph_X1_X2, df_Q_N_N, by=c("graph_type", "X1", "X2"), all.y = T),
merge(df_graph_X1_X2, df_Q_C_C, by=c("graph_type", "X1", "X2"), all.y = T),
merge(df_graph_X1_X2, df_Q_C_N, by=c("graph_type", "X1", "X2"), all.y = T)
)
write.csv(questions_df, file.path(getwd(), paste0("Questions-", filename, ".csv")))
}
path <- file.path(getwd(), "synthetic_df.csv")
Questions_generator(path)
